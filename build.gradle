// GENERATED BY UNITY. REMOVE THIS COMMENT TO PREVENT OVERWRITING WHEN EXPORTING AGAIN

buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.0'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        flatDir {
            dirs 'libs'
        }
    }
}

apply plugin: 'com.android.application'


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation(name: 'android-gif-drawable-1.2.6', ext:'aar')
    implementation(name: 'Baidu_MobAds_SDK-release-2019-05-05', ext:'aar')
    implementation(name: 'GDTSDK.unionNormal.4.110.980', ext:'aar')
    implementation(name: 'meizu-ads-2.3.1.0', ext:'aar')
    implementation(name: 'mintegral', ext:'aar')
    //
    implementation(name: 'oneway-release', ext:'aar')
    implementation 'com.android.support:multidex:1.0.3'
    implementation(name: 'open_ad_sdk', ext:'aar')
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation files('libs/SaaS_GameAnalytics_Android_SDK_V4.0.27.jar')
    implementation(name: 'windAd-2.15.0', ext:'aar')
}
import groovy.json.JsonSlurper
//读取配置
def getConfigs() {
    def inputFile = new File("${rootProject.projectDir.path}/channel/config.json").getText("utf-8")
    def json = new JsonSlurper().parseText(inputFile)
    return json
}
android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        applicationId 'com.changwan.hcrzdy.mz'
        ndk {
            abiFilters 'armeabi-v7a'
        }
        versionCode 2
        versionName '1.1'
        flavorDimensions "pack"
    }

    lintOptions {
        abortOnError false
    }

    aaptOptions {
        noCompress = ['.unity3d', '.ress', '.resource', '.obb', 'drawable-hdpi.zip', 'drawable-ldpi.zip', 'drawable-mdpi.zip', 'drawable-xhdpi.zip', 'drawable-xxhdpi.zip', 'drawable.zip', 'resources.zip']
        ignoreAssetsPattern = "!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }
    productFlavors {
//        chuizi {
//            applicationId "com.changwan.bksjdzz.cz"
//            buildConfigField("boolean", "SDK_DEBUG", "false")
//            dimension "pack"
//            //要保证res/value/string.xml中没有app_name，如果有务必删除
//            resValue "string", "app_name", "模拟球球大作战"
//        }
//
//        shunwan {
//            applicationId "com.changwan.bksjdzz.sw"
//            buildConfigField("boolean", "SDK_DEBUG", "false")
//            dimension "pack"
//            //要保证res/value/string.xml中没有app_name，如果有务必删除
//            resValue "string", "app_name", "模拟球球大作战"
//        }
        //读取json
        def json = getConfigs()
        //遍历渠道json
        json.each {
            flavor ->
                //判断是否打包
                if (flavor.is_pack) {
                    "${flavor.name}" {
                        dimension "pack"
                        applicationId "${flavor.package_name}"
                        buildConfigField("boolean", "SDK_DEBUG", "${flavor.sdk_debug}")
                        resValue "string", "app_name", "${flavor.app_name}"
                    }
                }
        }
    }
    signingConfigs {
        debug {
            storeFile
            storePassword
            keyAlias
            keyPassword
            v1SigningEnabled true
            v2SigningEnabled false
        }

        release {
            storeFile
            storePassword
            keyAlias
            keyPassword
            v1SigningEnabled true
            v2SigningEnabled false
        }

//        release {
//            storeFile file('C:/Users/wolong100/Desktop/work/wonglong.keystore')
//            storePassword 'iwonglong20140110'
//            keyAlias 'wonglong'
//            keyPassword 'iwonglong20140110'
//        }
    }
    getSigningProperties()
    applicationVariants.all { variant ->
        variant.outputs.all {
            def fileName = "hcrzdy_${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
            outputFileName = fileName
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-unity.txt'
            signingConfig signingConfigs.release
            jniDebuggable true
        }
        release {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-unity.txt'
            signingConfig signingConfigs.release
        }
        applicationVariants.all {
            //判断是release还是debug版本
            def buildType = it.buildType.name
            //获取当前时间的"YYYY-MM-dd"格式。
            def createTime = new Date().format("YYYY-MM-dd", TimeZone.getTimeZone("GMT+08:00"))
            //如果是正式包,将其输入到指定文件夹
            if (buildType == "release") {
                it.getPackageApplication().outputDirectory = new File('packages'+ "/${it.productFlavors[0].applicationId}/${createTime}")
            }
        }
    }
    project.afterEvaluate {
        getProductFlavors().each { f ->
            println("我的名渠道号是：${f.name}")
            task "${f.name}"(type: Copy, group: "custom", description: "拷贝资源文件") {
                from "${rootProject.projectDir.path}/channel/${f.name}/wlini"
                into "src/main/assets/"
            }
            tasks.matching {
                it.name.startsWith('pre') && ((it.name.endsWith('ReleaseBuild')) || it.name.endsWith('DebugBuild'))
            }.each { t ->
                def what
                if (t.name.endsWith('DebugBuild')) {
                    what = t.name.substring(3, t.name.indexOf("Debug")).toLowerCase()
                } else {
                    what = t.name.substring(3, t.name.indexOf("Release")).toLowerCase()
                }
                t.dependsOn(what)
            }

        }
    }
    packagingOptions {
        doNotStrip '*/armeabi-v7a/*.so'
    }


    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = false
        }
        abi {
            enableSplit = true
        }
    }
}
def getSigningProperties() {

    def propFile = file('signing.properties')
    if (propFile.canRead()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {

            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']

            android.signingConfigs.debug.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.debug.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.debug.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.debug.keyPassword = props['KEY_PASSWORD']




        } else {

            println 'signing.properties found but some entries are missing'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }
}

task copyFile(type: Copy, group: "custom", description: "拷贝资源文件") {
    from "${rootProject.projectDir.path}/channel/baidu/wlini"
    into "src/main/assets/wlini"
}
//下面为编译时的操作
tasks.matching {
    it.name.startsWith('pre') && ((it.name.endsWith('ReleaseBuild')) || it.name.endsWith('DebugBuild'))
}.each { t ->
    def what
    if (t.name.endsWith('DebugBuild')) {
        what = t.name.substring(3, t.name.indexOf("Debug")).toLowerCase()
    } else {
        what = t.name.substring(3, t.name.indexOf("Release")).toLowerCase()
    }
    t.dependsOn(what)
}